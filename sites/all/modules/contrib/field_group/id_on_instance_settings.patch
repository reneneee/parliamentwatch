diff --git a/field_group.field_ui.inc b/field_group.field_ui.inc
index 47a1545..264c4e0 100755
--- a/field_group.field_ui.inc
+++ b/field_group.field_ui.inc
@@ -656,6 +656,17 @@ function field_group_validate_css_class($element, &$form_state) {
 }
 
 /**
+ * Validate the entered css class from the submitted format settings.
+ * @param Array $element The validated element
+ * @param Array $form_state The state of the form.
+ */
+function field_group_validate_id($element, &$form_state) {
+  if (!empty($form_state['values']['fields'][$form_state['formatter_settings_edit']]['format_settings']['settings']['instance_settings']['id']) && !preg_match('!^[A-Za-z0-9-_]+$!', $form_state['values']['fields'][$form_state['formatter_settings_edit']]['format_settings']['settings']['instance_settings']['id'])) {
+    form_error($element, t('The css class must include only letters, numbers, underscores and dashes.'));
+  }
+}
+
+/**
  * Implements hook_field_info_max_weight().
  */
 function field_group_field_info_max_weight($entity_type, $bundle, $context) {
diff --git a/field_group.module b/field_group.module
index 3254e51..91d016e 100755
--- a/field_group.module
+++ b/field_group.module
@@ -240,7 +240,7 @@ function field_group_field_group_formatter_info() {
         'label' => t('Div'),
         'description' => t('This fieldgroup renders the inner content in a simple div with the titel as legend.'),
         'format_types' => array('open', 'collapsible', 'collapsed'),
-        'instance_settings' => array('description' => '', 'show_label' => 1, 'label_element' => 'h3', 'effect' => 'none', 'speed' => 'fast', 'classes' => '', 'required_fields' => 1),
+        'instance_settings' => array('description' => '', 'show_label' => 1, 'label_element' => 'h3', 'effect' => 'none', 'speed' => 'fast', 'classes' => '', 'required_fields' => 1, 'id' => ''),
         'default_formatter' => 'open',
       ),
       'fieldset' => array(
@@ -393,15 +393,25 @@ function field_group_field_group_format_settings($group) {
     );
   }
 
+  if (isset($formatter['instance_settings']['id'])) {
+    $form['instance_settings']['id'] = array(
+      '#title' => t('ID'),
+      '#type' => 'textfield',
+      '#default_value' => isset($group->format_settings['instance_settings']['id']) ? $group->format_settings['instance_settings']['id'] : (isset($formatter['instance_settings']['id']) ? $formatter['instance_settings']['id'] : ''),
+      '#weight' => 3,
+      '#element_validate' => array('field_group_validate_id'),
+    );
+  }
   if (isset($formatter['instance_settings']['classes'])) {
     $form['instance_settings']['classes'] = array(
       '#title' => t('Extra CSS classes'),
       '#type' => 'textfield',
       '#default_value' => isset($group->format_settings['instance_settings']['classes']) ? $group->format_settings['instance_settings']['classes'] : (isset($formatter['instance_settings']['classes']) ? $formatter['instance_settings']['classes'] : ''),
-      '#weight' => 3,
+      '#weight' => 4,
       '#element_validate' => array('field_group_validate_css_class'),
     );
   }
+
   if (isset($formatter['instance_settings']['description'])) {
     $form['instance_settings']['description'] = array(
       '#title' => t('Description'),
@@ -556,7 +566,13 @@ function field_group_field_group_pre_render(& $element, &$group, & $form) {
   $form['#attached']['js'][] = 'misc/form.js';
   $form['#attached']['js'][] = 'misc/collapse.js';
 
-  $element['#id'] = $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $view_mode . '_' . $group->group_name;
+  if (isset($group->format_settings['instance_settings']['id']) && !empty($group->format_settings['instance_settings']['id'])) {
+    $element['#id'] = $group->format_settings['instance_settings']['id'];
+  }
+  else {
+    $element['#id'] = $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $view_mode . '_' . $group->group_name;
+  }
+
   $element['#weight'] = $group->weight;
 
   // Call the pre render function for the format type.
@@ -610,13 +626,13 @@ function field_group_pre_render_div(&$element, $group, &$form) {
 
   $group->classes .= " speed-$speed effect-$effect";
   if ($group->format_settings['formatter'] != 'open') {
-    $element['#prefix'] = '<div class="field-group-format ' . $group->classes . '">
+    $element['#prefix'] = '<div id="' . $element['#id'] . '" class="field-group-format ' . $group->classes . '">
       <' . $label_element . '><span class="field-group-format-toggler">' . check_plain(t($group->label)) . '</span></' . $label_element . '>
       <div class="field-group-format-wrapper" style="display: ' . ($group->collapsed ? 'none' : 'block') . ';">';
     $element['#suffix'] = '</div></div>';
   }
   else {
-    $element['#prefix'] = '<div class="field-group-format ' . $group->group_name . ' ' . $group->classes . '">';
+    $element['#prefix'] = '<div id="' . $element['#id'] . '" class="field-group-format ' . $group->group_name . ' ' . $group->classes . '">';
     if ($show_label) {
       $element['#prefix'] .= '<' . $label_element . '><span>' . check_plain(t($group->label)) . '</span></' . $label_element . '>';
     }
@@ -1402,6 +1418,8 @@ function field_group_info_groups($entity_type = NULL, $bundle = NULL, $view_mode
       $groups = $cached->data;
     }
     else {
+      drupal_static_reset('ctools_export_load_object');
+      drupal_static_reset('ctools_export_load_object_all');
       $groups = field_group_read_groups();
       cache_set('field_groups', $groups, 'cache_field');
     }
diff --git a/field_group.test b/field_group.test
index 5c07ffd..0375963 100755
--- a/field_group.test
+++ b/field_group.test
@@ -26,8 +26,8 @@
 class GroupUITestCase extends DrupalWebTestCase {
   public static function getInfo() {
     return array(
-      'name' => 'Group UI tests',
-      'description' => 'Test the group UI functionality.',
+      'name' => 'Field group tests',
+      'description' => 'Test the field group functionality.',
       'group' => 'Field group',
     );
   }
@@ -36,13 +36,48 @@ class GroupUITestCase extends DrupalWebTestCase {
     parent::setUp('field_test', 'field_group');
 
     // Create test user.
-    $admin_user = $this->drupalCreateUser(array('administer content types'));
+    $admin_user = $this->drupalCreateUser(array('administer content types', 'administer nodes', 'access administration pages', 'bypass node access'));
     $this->drupalLogin($admin_user);
 
     // Create random group name.
     $this->group_label = $this->randomName(8);
     $this->group_name_input = drupal_strtolower($this->randomName(8));
     $this->group_name = 'group_' . $this->group_name_input;
+
+    // Create a fieldgroup.
+    $field_group = new stdClass;
+    $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
+    $field_group->api_version = 1;
+    $field_group->identifier = 'wrapper|node|article|form';
+    $field_group->group_name = 'wrapper';
+    $field_group->entity_type = 'node';
+    $field_group->bundle = 'article';
+    $field_group->mode = 'form';
+    $field_group->parent_name = '';
+    $field_group->data = array(
+      'label' => 'Wrapper',
+      'weight' => '1',
+      'children' => array(
+        0 => 'field_image',
+      ),
+      'format_type' => 'div',
+      'format_settings' => array(
+        'label' => 'Link',
+        'instance_settings' => array(
+          'required_fields' => 0,
+          'id' => 'wrapper-id',
+          'classes' => '',
+          'description' => '',
+          'show_label' => '0',
+          'label_element' => 'h3',
+          'effect' => 'none',
+          'speed' => 'fast',
+        ),
+        'formatter' => 'open',
+      ),
+    );
+    drupal_write_record('field_group', $field_group);
+    ctools_export_crud_enable('field_group', $field_group->identifier);
   }
 
   /**
@@ -77,6 +112,7 @@ class GroupUITestCase extends DrupalWebTestCase {
    * Delete a group.
    */
   function deleteGroup() {
+
     $this->drupalPost('admin/structure/types/manage/article/groups/' . $this->group_name . '/delete/form', array(), t('Delete'));
     $this->assertRaw(t('The group %label has been deleted from the %article content type.', array('%label' => $this->group_label, '%article' => 'Article')), t('Group removal message displayed on screen.'));
 
@@ -104,13 +140,12 @@ class GroupUITestCase extends DrupalWebTestCase {
    * Nest a field underneath a group.
    */
   function testNestField() {
-    $this->createGroup();
-    $edit = array(
-      'fields[field_image][parent]' => $this->group_name,
-    );
-    $this->drupalPost('admin/structure/types/manage/article/fields', $edit, t('Save'));
-    $this->assertRaw(t('Your settings have been saved.'), t('Settings saved'));
+
+    // Test on the wrapper field.
     $groups = field_group_info_groups('node', 'article', 'form', TRUE);
-    $this->assertTrue(in_array('field_image', $groups[$this->group_name]->children), t('Image is a child of %group', array('%group' => $this->group_label)));
+    $this->assertTrue(in_array('field_image', $groups['wrapper']->children), t('Image is a child of %group', array('%group' => 'Wrapper')));
+
+    $this->drupalGet('node/add/article');
+    $this->assertRaw('id="wrapper-id"', t('Wrapper id set on wrapper div'));
   }
 }
